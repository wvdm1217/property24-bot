# Default values for property24-bot
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: property24-bot
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# Notification method: 'ntfy' or 'telegram'
notificationMethod: ntfy

# Ntfy configuration (used when notificationMethod is 'ntfy')
ntfy:
  server: "https://ntfy.sh"
  topic: ""  # Required for ntfy method

# Telegram configuration (used when notificationMethod is 'telegram')
telegram:
  # Store sensitive tokens in a Kubernetes secret
  tokenSecret: ""  # Name of secret containing TELEGRAM_TOKEN
  chatId: ""       # Your Telegram chat ID

# Application configuration
app:
  pollInterval: 60
  locationName: "Stellenbosch"
  runOnce: false
  logLevel: "INFO"
  
  # Path to payload file
  payloadFile: "data/payload.json"
  
  # State file configuration
  stateFile: "data/state.duckdb"

# Metrics configuration
metrics:
  # Enable Prometheus metrics endpoint
  enabled: true
  
  # Port for metrics server
  port: 8000
  
  # Service configuration for metrics endpoint
  service:
    type: ClusterIP
    port: 8000
    annotations: {}
      # prometheus.io/scrape: "true"
      # prometheus.io/port: "8000"
  
  # ServiceMonitor configuration (requires Prometheus Operator)
  serviceMonitor:
    enabled: false
    # Scrape interval
    interval: 30s
    # Scrape timeout
    scrapeTimeout: 10s
    # Additional labels for ServiceMonitor
    labels: {}
      # prometheus: kube-prometheus
    # Additional annotations for ServiceMonitor
    annotations: {}
    # Relabeling configs
    relabelings: []
    # Metric relabeling configs
    metricRelabelings: []
  
  # Grafana Dashboard configuration (requires kube-prometheus-stack)
  grafanaDashboard:
    enabled: false
    # Additional labels for dashboard ConfigMap
    # For kube-prometheus-stack, add: grafana_dashboard: "1"
    labels: {}
      # grafana_dashboard: "1"
    # Additional annotations for dashboard ConfigMap
    annotations: {}

# Persistent storage for state
persistence:
  enabled: false
  # storageClass: "-"
  accessMode: ReadWriteOnce
  size: 1Gi
  # existingClaim: ""

# Volume mount for payload.json
payload:
  # If you want to use a ConfigMap for the payload
  useConfigMap: false
  configMapName: ""
  
  # If you want to mount from a PVC or hostPath
  usePersistentVolume: false
  persistentVolumeClaim: ""

nodeSelector: {}

tolerations: []

affinity: {}
